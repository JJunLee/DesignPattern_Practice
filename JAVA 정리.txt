JAVA 정리

static = 클래스
non static = 인스턴스

.new를 통해 클래스의 복제본인 인스턴스를 생성

.static이 있으면 클래스, 인스턴스를 생성하면 non static
>> 클래스 변수(static)를 바꾸면 인스턴스와 클래스 모든 곳에서 그 값이 바뀌고 인스턴스 변수(non static)를 바꾸면 독립적이라 다른 인스턴스나 클래스에서 바뀌지 않는다.

*생성자 : 초기에 주입할 필요가 있는 것을 저장, 인스턴스 생성할 때 필요한 것들 

*.this : 클래스가 인스턴스화 되었을때 인스턴스를 가리키는 이름, this는 생성자 메소드의 매개변수가 아닌 인스턴스 변수를 가리킨다.

*상속 - .Overriding : 부모가 가진 기능을 자식클래스에서 재정의(기능을 수정)

*Overloading : 같은 이름의 메소드를 형태만 다르게 하여 여러 개 만들 수 있다(과적합, 상속과 관련 없음)

*super. : 부모클래스의 기능을 자식클래스가 사용할 때 사용

.부모클래스의 생성자를 생성하면 자식클래스도 반드시 같은 생성자를 생성해야 한다(super써서)

*인터페이스 : 요구하고자 하는 규격을 명시하여 규제, 해당 인터페이스를 implements한 클래스는 인터페이스 안의 규정을 반드시 준수해야함
>>버그는 있을지언정 호환되지 않는 문제는 없다.
ex) 외주를 맡길 때

.하나의 클래스는 여러 개의 인터페이스를 구현(implements)할 수 있다.

.인터페이스에서 변수를 정의할 때는 내용(값)을 적어주고, 메소드를 정의할 때는 내용(구현)을 적지 않는다
>>이에 implements한 class에서는 인터페이스 안의 변수를 정의하지 않고 그 값을 갖게 된다.

*다형성(Polymorphism) : 클래스가 데이터타입을 어떤 것으로 하느냐에 따라서 다양한 얼굴을 갖는다 >> 호환성을 보장해준다.
ex) A라는 인터페이스를 구현(implemets)하는 클래스 Q와W에 대해서 
A x = new Q();
A x = new W(); 와 같이 인스턴스 생성이 가능하다.

*인터페이스 : 요구하고자 하는 규격을 명시하여 규제, 해당 인터페이스를 implements한 클래스는 인터페이스 안의 규정을 반드시 준수해야함
>>버그는 있을지언정 호환되지 않는 문제는 없다.
ex) 외주를 맡길 때

.하나의 클래스는 여러 개의 인터페이스를 구현(implements)할 수 있다.

.인터페이스에서 변수를 정의할 때는 내용(값)을 적어주고, 메소드를 정의할 때는 내용(구현)을 적지 않는다
>>이에 implements한 class에서는 인터페이스 안의 변수를 정의하지 않고 그 값을 갖게 된다.

*다형성(Polymorphism) : 클래스가 데이터타입을 어떤 것으로 하느냐에 따라서 다양한 얼굴을 갖는다 >> 호환성을 보장해준다.
ex) A라는 인터페이스를 구현(implemets)하는 클래스 Q와W에 대해서 
A x = new Q();
A x = new W(); 와 같이 인스턴스 생성이 가능하다.

*추상화(abstract) : 
.상속을 강제한다.
.추상 클래스 내에는 추상 메소드가 아닌 메소드가 존재할 수 있다.
.추상 메소드는 본체가 없다.
.추상 메소드에 대한 구체적인 구현에 대한 책임은 사용하는 클래스에 넘긴다.
.멤버 중에 하나라도 추상 메소드이면 그 추상 메소드를 담고 있는 클래스는 자동으로 추상 클래스가 된다.

*추상 클래스 : 상속을 강제하기 위한 규제, extends 한 클래스에서 오버라이딩을 통해 추상 메소드의 내용을 채워야한다.

@추상클래스의 사용 : 복제
@인터페이스의 사용 : 계약서 혹은 설계도

상속vs인터페이스vs추상클래스
https://velog.io/@mercurios0603/%EC%83%81%EC%86%8D-%EC%B6%94%EC%83%81%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EB%A0%A4%EC%A4%98

인터페이스 vs 추상클래스
https://inpa.tistory.com/entry/JAVA-%E2%98%95-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-vs-%EC%B6%94%EC%83%81%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%B0%A8%EC%9D%B4%EC%A0%90-%EC%99%84%EB%B2%BD-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0

*final : 한 번 세팅되면 절대로 바뀔 수 없는 값, 상속/변경을 금지
.final은 override 할 수 없어서 상속할 수 없다.

Final <-> 추상화